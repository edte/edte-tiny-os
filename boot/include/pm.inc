; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;                               pm.inc
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; 保护模式数据结构、分页机制数据结构定义说明

; 描述符图示

; 图示一
;
;  ------ ┏━━┳━━┓高地址
;         ┃ 7  ┃ 段 ┃
;         ┣━━┫    ┃
;                  基
;  字节 7 ┆    ┆    ┆
;                  址
;         ┣━━┫ ② ┃
;         ┃ 0  ┃    ┃
;  ------ ┣━━╋━━┫
;         ┃ 7  ┃ G  ┃
;         ┣━━╉──┨
;         ┃ 6  ┃ D  ┃
;         ┣━━╉──┨
;         ┃ 5  ┃ 0  ┃
;         ┣━━╉──┨
;         ┃ 4  ┃ AVL┃
;  字节 6 ┣━━╉──┨
;         ┃ 3  ┃    ┃
;         ┣━━┫ 段 ┃
;         ┃ 2  ┃ 界 ┃
;         ┣━━┫ 限 ┃
;         ┃ 1  ┃    ┃
;         ┣━━┫ ② ┃
;         ┃ 0  ┃    ┃
;  ------ ┣━━╋━━┫
;         ┃ 7  ┃ P  ┃
;         ┣━━╉──┨
;         ┃ 6  ┃    ┃
;         ┣━━┫ DPL┃
;         ┃ 5  ┃    ┃
;         ┣━━╉──┨
;         ┃ 4  ┃ S  ┃
;  字节 5 ┣━━╉──┨
;         ┃ 3  ┃    ┃
;         ┣━━┫ T  ┃
;         ┃ 2  ┃ Y  ┃
;         ┣━━┫ P  ┃
;         ┃ 1  ┃ E  ┃
;         ┣━━┫    ┃
;         ┃ 0  ┃    ┃
;  ------ ┣━━╋━━┫
;         ┃ 23 ┃    ┃
;         ┣━━┫    ┃
;         ┃ 22 ┃    ┃
;         ┣━━┫ 段 ┃
;
;   字节  ┆    ┆ 基 ┆
; 2, 3, 4
;         ┣━━┫ 址 ┃
;         ┃ 1  ┃ ① ┃
;         ┣━━┫    ┃
;         ┃ 0  ┃    ┃
;  ------ ┣━━╋━━┫
;         ┃ 15 ┃    ┃
;         ┣━━┫    ┃
;         ┃ 14 ┃    ┃
;         ┣━━┫ 段 ┃
;
; 字节 0,1┆    ┆ 界 ┆
;
;         ┣━━┫ 限 ┃
;         ┃ 1  ┃ ① ┃
;         ┣━━┫    ┃
;         ┃ 0  ┃    ┃
;  ------ ┗━━┻━━┛低地址
;


; 图示二

; 高地址……………………………………………………………………… 低地址

; |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0    |
; |7654321076543210765432107654321076543210765432107654321076543210|	<- 共 8 字节
; |--------========--------========--------========--------========|
; ┏━━━┳━━━━━━━┳━━━━━━━━━━━┳━━━━━━━┓
; ┃31..24┃   (见下图)   ┃     段基址 (23..0)    ┃ 段界限 (15..0)┃
; ┃      ┃              ┃                      ┃              ┃
; ┃ 基址 2┃③│②│    ①┃基址 1b│   基址 1a     ┃    段界限 1   ┃
; ┣━━━╋━━━┳━━━╋━━━━━━━━━━━╋━━━━━━━┫
; ┃   %6 ┃  %5  ┃  %4  ┃  %3  ┃     %2       ┃       %1     ┃
; ┗━━━┻━━━┻━━━┻━━━┻━━━━━━━┻━━━━━━━┛
;         │                \_________
;         │                          \__________________
;         │                                             \________________________________________________
;         │                                                                                              \
;         ┏━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┓
;         ┃ 7  ┃ 6  ┃ 5  ┃ 4  ┃ 3  ┃ 2  ┃ 1  ┃ 0  ┃ 7  ┃ 6  ┃ 5  ┃ 4  ┃ 3  ┃ 2  ┃ 1  ┃ 0  ┃
;         ┣━━╋━━╋━━╋━━╋━━┻━━┻━━┻━━╋━━╋━━┻━━╋━━╋━━┻━━┻━━┻━━┫
;         ┃ G  ┃ D  ┃ 0  ┃ AVL┃   段界限 2 (19..16)  ┃  P ┃   DPL    ┃ S  ┃       TYPE           ┃
;         ┣━━┻━━┻━━┻━━╋━━━━━━━━━━━╋━━┻━━━━━┻━━┻━━━━━━━━━━━┫
;         ┃      ③: 属性 2      ┃    ②: 段界限 2      ┃                   ①: 属性 1                  ┃
;         ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━━━┛
;       高地址                                                                                          低地址
;
;

; 说明:
;
; (1) P:    存在 (Present) 位。
;		P=1 表示描述符对地址转换是有效的，或者说该描述符所描述的段存在，即在内存中；
;		P=0 表示描述符对地址转换无效，即该段不存在。使用该描述符进行内存访问时会引起异常。
;
; (2) DPL:  表示描述符特权级 (Descriptor Privilege level)，共 2 位。它规定了所描述段的特权级，用于特权检查，以决定对该段能否访问。 
;
; (3) S:   说明描述符的类型。
;		对于存储段描述符而言，S=1，以区别与系统段描述符和门描述符 (S=0)。 
;
; (4) TYPE: 说明存储段描述符所描述的存储段的具体属性。
;
;		 
;	数据段类型	类型值		说明
;			----------------------------------
;			0		只读 
;			1		只读、已访问 
;			2		读 / 写 
;			3		读 / 写、已访问 
;			4		只读、向下扩展 
;			5		只读、向下扩展、已访问 
;			6		读 / 写、向下扩展 
;			7		读 / 写、向下扩展、已访问 
;
;		
;			类型值		说明
;	代码段类型	----------------------------------
;			8		只执行 
;			9		只执行、已访问 
;			A		执行 / 读 
;			B		执行 / 读、已访问 
;			C		只执行、一致码段 
;			D		只执行、一致码段、已访问 
;			E		执行 / 读、一致码段 
;			F		执行 / 读、一致码段、已访问 
;
;		
;	系统段类型	类型编码	说明
;			----------------------------------
;			0		<未定义>
;			1		可用 286TSS
;			2		LDT
;			3		忙的 286TSS
;			4		286 调用门
;			5		任务门
;			6		286 中断门
;			7		286 陷阱门
;			8		未定义
;			9		可用 386TSS
;			A		<未定义>
;			B		忙的 386TSS
;			C		386 调用门
;			D		<未定义>
;			E		386 中断门
;			F		386 陷阱门
;
; (5) G:    段界限粒度 (Granularity) 位。
;		G=0 表示界限粒度为字节；
;		G=1 表示界限粒度为 4K 字节。
;           注意，界限粒度只对段界限有效，对段基地址无效，段基地址总是以字节为单位。 
;
; (6) D:    D 位是一个很特殊的位，在描述可执行段、向下扩展数据段或由 SS 寄存器寻址的段 (通常是堆栈段) 的三种描述符中的意义各不相同。 
;           ⑴ 在描述可执行段的描述符中，D 位决定了指令使用的地址及操作数所默认的大小。
;		① D=1 表示默认情况下指令使用 32 位地址及 32 位或 8 位操作数，这样的代码段也称为 32 位代码段；
;		② D=0 表示默认情况下，使用 16 位地址及 16 位或 8 位操作数，这样的代码段也称为 16 位代码段，它与 80286 兼容。可以使用地址大小前缀和操作数大小前缀分别改变默认的地址或操作数的大小。 
;           ⑵ 在向下扩展数据段的描述符中，D 位决定段的上部边界。
;		① D=1 表示段的上部界限为 4G；
;		② D=0 表示段的上部界限为 64K，这是为了与 80286 兼容。 
;           ⑶ 在描述由 SS 寄存器寻址的段描述符中，D 位决定隐式的堆栈访问指令 (如 PUSH 和 POP 指令) 使用何种堆栈指针寄存器。
;		① D=1 表示使用 32 位堆栈指针寄存器 ESP；
;		② D=0 表示使用 16 位堆栈指针寄存器 SP，这与 80286 兼容。 
;
; (7) AVL:  软件可利用位。80386 对该位的使用未左规定，Intel 公司也保证今后开发生产的处理器只要与 80386 兼容，就不会对该位的使用做任何定义或规定。 
;


;----------------------------------------------------------------------------
; 描述符类型值说明
; 其中:
;       DA_  : Descriptor Attribute
;       D    : 数据段
;       C    : 代码段
;       S    : 系统段
;       R    : 只读
;       RW   : 读写
;       A    : 已访问
;       其它：可按照字面意思理解
;----------------------------------------------------------------------------
DA_32		EQU	4000h	; 32 位段
DA_LIMIT_4K	EQU	8000h	; 段界限粒度为 4K 字节

DA_DPL0		EQU	  00h	; DPL = 0
DA_DPL1		EQU	  20h	; DPL = 1
DA_DPL2		EQU	  40h	; DPL = 2
DA_DPL3		EQU	  60h	; DPL = 3

;----------------------------------------------------------------------------
; 存储段描述符类型值说明
;----------------------------------------------------------------------------
DA_DR		EQU	90h	; 存在的只读数据段类型值
DA_DRW		EQU	92h	; 存在的可读写数据段属性值
DA_DRWA		EQU	93h	; 存在的已访问可读写数据段类型值
DA_C		EQU	98h	; 存在的只执行代码段属性值
DA_CR		EQU	9Ah	; 存在的可执行可读代码段属性值
DA_CCO		EQU	9Ch	; 存在的只执行一致代码段属性值
DA_CCOR		EQU	9Eh	; 存在的可执行可读一致代码段属性值

;----------------------------------------------------------------------------
; 系统段描述符类型值说明
;----------------------------------------------------------------------------
DA_LDT		EQU	  82h	; 局部描述符表段类型值
DA_TaskGate	EQU	  85h	; 任务门类型值
DA_386TSS	EQU	  89h	; 可用 386 任务状态段类型值
DA_386CGate	EQU	  8Ch	; 386 调用门类型值
DA_386IGate	EQU	  8Eh	; 386 中断门类型值
DA_386TGate	EQU	  8Fh	; 386 陷阱门类型值
;----------------------------------------------------------------------------


;====================================================================================================================================================
; 选择子图示:
;         ┏━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┓
;         ┃ 15 ┃ 14 ┃ 13 ┃ 12 ┃ 11 ┃ 10 ┃ 9  ┃ 8  ┃ 7  ┃ 6  ┃ 5  ┃ 4  ┃ 3  ┃ 2  ┃ 1  ┃ 0  ┃
;         ┣━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━╋━━╋━━┻━━┫
;         ┃                                 描述符索引                     ┃ TI ┃   RPL   ┃
;         ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┻━━┻━━━━━┛
;
; 段索引：用于指定描述符表中某个描述符的偏移量，从 0 开始计数。一共 10 bit
;
; TI (Table Indicator): 引用描述符表指示位, 1bit
;	TI=0 指示从全局描述符表 GDT 中读取描述符；
;	TI=1 指示从局部描述符表 LDT 中读取描述符。
;
; RPL (Requested Privilege Level): 请求特权级，用于控制访问该段的特权级别。 2 bit
; 取值为 0、1 或 2。越小表示特权级别越高，通常 0 用于内核。
;


;----------------------------------------------------------------------------
; 选择子类型值说明
; 其中:
;       SA_  : Selector Attribute

SA_RPL0		EQU	0	; ┓
SA_RPL1		EQU	1	; ┣ RPL
SA_RPL2		EQU	2	; ┃
SA_RPL3		EQU	3	; ┛

SA_TIG		EQU	0	; ┓TI
SA_TIL		EQU	4	; ┛
;----------------------------------------------------------------------------



;====================================================================================================================================================
;----------------------------------------------------------------------------
; 分页机制使用的常量说明
;----------------------------------------------------------------------------
PG_P		EQU	1	; 页存在属性位
PG_RWR		EQU	0	; R/W 属性位值，读 / 执行
PG_RWW		EQU	2	; R/W 属性位值，读 / 写 / 执行
PG_USS		EQU	0	; U/S 属性位值，系统级
PG_USU		EQU	4	; U/S 属性位值，用户级
;----------------------------------------------------------------------------



; =========================================
; FLAGS - Intel 8086 Family Flags Register
; =========================================
;
;      |11|10|F|E|D|C|B|A|9|8|7|6|5|4|3|2|1|0|
;        |  | | | | | | | | | | | | | | | | '---  CF……Carry Flag
;        |  | | | | | | | | | | | | | | | '---  1
;        |  | | | | | | | | | | | | | | '---  PF……Parity Flag
;        |  | | | | | | | | | | | | | '---  0
;        |  | | | | | | | | | | | | '---  AF……Auxiliary Flag
;        |  | | | | | | | | | | | '---  0
;        |  | | | | | | | | | | '---  ZF……Zero Flag
;        |  | | | | | | | | | '---  SF……Sign Flag
;        |  | | | | | | | | '---  TF……Trap Flag  (Single Step)
;        |  | | | | | | | '---  IF……Interrupt Flag
;        |  | | | | | | '---  DF……Direction Flag
;        |  | | | | | '---  OF……Overflow flag
;        |  | | | '-----  IOPL……I/O Privilege Level  (286+ only)
;        |  | | '-----  NT……Nested Task Flag  (286+ only)
;        |  | '-----  0
;        |  '-----  RF……Resume Flag (386+ only)
;        '------  VM……Virtual Mode Flag (386+ only)
;
;        注: see   PUSHF  POPF  STI  CLI  STD  CLD
;


;====================================================================================================================================================
; 宏定义 

; 描述符
; usage: Descriptor Base, Limit, Attr
;        Base:  dd
;        Limit: dd (low 20 bits available)
;        Attr:  dw (lower 4 bits of higher byte are always 0)
%macro Descriptor 3
	dw	%2 & 0FFFFh				                ; 段界限 1				            (2 字节)
	dw	%1 & 0FFFFh				                ; 段基址 1				            (2 字节)
	db	(%1 >> 16) & 0FFh		            	; 段基址 2				            (1 字节)
	dw	((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)	    ; 属性 1 + 段界限 2 + 属性 2		(2 字节)
	db	(%1 >> 24) & 0FFh			            ; 段基址 3				            (1 字节)
%endmacro ; 共 8 字节

;----------------------------------------------------------------------
; 门
; usage: Gate Selector, Offset, DCount, Attr
;        Selector:  dw
;        Offset:    dd
;        DCount:    db
;        Attr:      db
%macro Gate 4
	dw	(%2 & 0FFFFh)			        	; 偏移 1				(2 字节)
	dw	%1				                	; 选择子				(2 字节)
	dw	(%3 & 1Fh) | ((%4 << 8) & 0FF00h)	; 属性					(2 字节)
	dw	((%2 >> 16) & 0FFFFh)			    ; 偏移 2				(2 字节)
%endmacro ; 共 8 字节





;==============================================================================================
; 最终内存布局
; 内存看上去是这样的：
;              ┃                                    ┃
;              ┃                 .                  ┃
;              ┃                 .                  ┃
;              ┃                 .                  ┃
;              ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
;              ┃■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■┃
;              ┃■■■■■■■■■■■■Page  Tables■■■■■■■■■■■■┃
;              ┃■■■■■■■■■■(大小由LOADER决定)■■■■■■■■┃
;    00101000h ┃■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■┃ PageTblBase
;              ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
;              ┃■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■┃
;    00100000h ┃■■■■■■■■■■Page Directory Table■■■■■■┃ PageDirBase  <- 1M
;              ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
;              ┃□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□┃
;       F0000h ┃□□□□□□□□□□□□□System ROM□□□□□□□□□□□□□┃
;              ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
;              ┃□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□┃
;       E0000h ┃□□□□□□□□□Expansion of system ROM□□□□┃
;              ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
;              ┃□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□┃
;       C0000h ┃□□□□□□□□Reserved for ROM expansion□□┃
;              ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
;              ┃□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□┃ B8000h ← gs
;       A0000h ┃□□□□□□□□Display adapter reserved□□□□┃
;              ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
;              ┃□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□┃
;       9FC00h ┃□□□□□extended BIOS data area (EBDA)□┃
;              ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
;              ┃■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■┃
;       90000h ┃■■■■■■■■■■■■■LOADER.BIN■■■■■■■■■■■■■┃ somewhere in LOADER ← esp
;              ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
;              ┃■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■┃
;       80000h ┃■■■■■■■■■■■■■KERNEL.BIN■■■■■■■■■■■■■┃
;              ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
;              ┃■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■┃
;       30000h ┃■■■■■■■■■■■■■■■KERNEL■■■■■■■■■■■■■■■┃ 30400h ← KERNEL 入口 (KernelEntryPointPhyAddr)
;              ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
;              ┃                                    ┃
;        7E00h ┃              F  R  E  E            ┃
;              ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
;              ┃■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■┃
;        7C00h ┃■■■■■■■■■■■■BOOT  SECTOR■■■■■■■■■■■■┃
;              ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
;              ┃                                    ┃
;         500h ┃              F  R  E  E            ┃
;              ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
;              ┃□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□┃
;         400h ┃□□□□□□□ROM BIOS parameter area □□□□□┃
;              ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
;              ┃◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇┃
;           0h ┃◇◇◇◇◇◇◇◇◇◇◇ Int  Vectors ◇◇◇◇◇◇◇◇◇◇◇┃
;              ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛ ← cs, ds, es, fs, ss
;
;
;		┏━━━┓		┏━━━┓
;		┃■■■┃ 我们使用 	┃□□□┃ 不能使用的内存
;		┗━━━┛		┗━━━┛
;		┏━━━┓		┏━━━┓
;		┃      ┃ 未使用空间	┃◇◇◇┃ 可以覆盖的内存
;		┗━━━┛		┗━━━┛
;
; 注：KERNEL 的位置实际上是很灵活的，可以通过同时改变 LOAD.INC 中的 KernelEntryPointPhyAddr 和 MAKEFILE 中参数 -Ttext 的值来改变。
;     比如，如果把 KernelEntryPointPhyAddr 和 -Ttext 的值都改为 0x400400，则 KERNEL 就会被加载到内存 0x400000(4M) 处，入口在 0x400400。
;
;
; GDT 以及相应的描述符是这样的：
;
;		              Descriptors               Selectors
;              ┏━━━━━━━━━━━━━━━━━━┓
;              ┃         Dummy Descriptor           ┃
;              ┣━━━━━━━━━━━━━━━━━━┫
;              ┃         DESC_FLAT_C    (0～4G)     ┃   8h = cs
;              ┣━━━━━━━━━━━━━━━━━━┫
;              ┃         DESC_FLAT_RW   (0～4G)     ┃  10h = ds, es, fs, ss
;              ┣━━━━━━━━━━━━━━━━━━┫
;              ┃         DESC_VIDEO                 ┃  1Bh = gs
;              ┗━━━━━━━━━━━━━━━━━━┛
;
; 注意! 在使用 C 代码的时候一定要保证 ds, es, ss 这几个段寄存器的值是一样的
; 因为编译器有可能编译出使用它们的代码, 而编译器默认它们是一样的. 比如串拷贝操作会用到 ds 和 es.
;
;
